% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/fuzzyforest_fit.R
\name{ff}
\alias{ff}
\title{Fits fuzzy forest algorithm.}
\usage{
ff(X, y, module_membership, screen_params = screen_control(min_ntree = 5000),
  select_params = select_control(min_ntree = 5000), final_ntree = 500,
  num_processors = 1, nodesize)
}
\arguments{
\item{X}{A data.frame.
Each column corresponds to a feature vectors.}

\item{y}{Response vector.  For classification, y should be a
factor or a character.  For regression, y should be
numeric.}

\item{module_membership}{A vector giving module membership of each feature.}

\item{screen_params}{Parameters for screening step of fuzzy forests.
See \code{\link[fuzzyforest]{screen_control}} for details.
\code{screen_params} is an object of type
\code{screen_control}.}

\item{select_params}{Parameters for selection step of fuzzy forests.
See \code{\link[fuzzyforest]{select_control}} for details.
\code{select_params} is an object of type
\code{select_control}.}

\item{final_ntree}{Number trees grown in the final random forest.
This random forest contains all selected features.}

\item{num_processors}{Number of processors used to fit random forests.}

\item{nodesize}{Minimum terminal nodesize. 1 if classification.
5 if regression.  If the sample size is very large,
the trees will be grown extremely deep.
This may lead to issues with memory usage and may
lead to significant increases in the time it takes
the algorithm to run.  In this case,
it may be useful to increase \code{nodesize}.}
}
\value{
A data.frame with the top ranked features.
}
\description{
Fits fuzzy forest algorithm.  Returns
fuzzy forest object.
}
\note{
This work was partially funded by NSF IIS 1251151.
}
\examples{
n <- 500
minCor = .66
seed1 <- rnorm(n)
seed2 <- rnorm(n)
p <- 100
X1 <- WGCNA::simulateModule(seed1, nGenes=p/2, minCor=.66, maxCor=.99,
                     propNegativeCor=.01)
X2 <- WGCNA::simulateModule(seed2, nGenes=p/2, minCor=.66, maxCor=.99,
                     propNegativeCor=.01)
beta1 <- c(c(5, 2, 1, 0, 0), rep(0, p/2-5))
beta2 <- beta1
X <- cbind(X1, X2)
beta <- c(beta1, beta2)
y <- X\%*\%beta + rnorm(n)
X <- as.data.frame(X)
names(X) <- paste("V",1:p,sep="")
module_membership <- as.character(rep(1:2,each=p/2))
fit <- ff(X, y, module_membership,
                  screen_params=screen_control(min_ntree=100),
                  select_params=select_control(number_selected=3, min_ntree=100))
}

